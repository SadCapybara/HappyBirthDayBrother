document.addEventListener("DOMContentLoaded", () => {
  const startButton = document.getElementById("start-button");
  const startScreen = document.getElementById("start-screen");
  const gameScreen = document.getElementById("game-screen");
// —á–∏—Ç–∞–µ–º –∏–∑ localStorage —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ (–∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
const obtained = new Set(JSON.parse(localStorage.getItem("obtainedWishes") || "[]"));

  const canvas = document.getElementById("wheel");
  const ctx = canvas.getContext("2d");
  const resultDiv = document.getElementById("result");

const soundWin = document.getElementById("wheel-sound-win");
	 const sound = document.getElementById("wheel-sound");
  const music = document.getElementById("bg-music");
  const soundAgain = document.getElementById("wheel-sound-again");

const winGif = document.getElementById("win-gif");
const wishes = [
  {
    label: "üêâ",
    wish: "üêâ–ö–∞–ø–∏–±–∞—Ä—å–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ! üêâ (—ç—Ç–æ –∫–∞–ø–∏–±–∞—Ä–∞). –í —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç–µ–±–µ –Ω–µ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç —Å–∂–µ—á—å —Ç–≤–æ–∏ –∫–∞–ª–æ—Ä–∏–∏. –õ–µ–∂–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∂–∏–∑–Ω—å—é. –ë–∞–ª–¥—ë–∂–Ω–æ–≥–æ —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.",
    weight: 0.3
  },
  {
    label: "üê∏",
    wish: "üê∏–õ—è–≥—É—à–∞—á—å–µ  Ã∂—ÅÃ∂—ÄÃ∂–µÃ∂–¥Ã∂–∞Ã∂ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ üê∏. –≠—Ç–æ —Ç–≤–æ–π –¥–µ–Ω—å, –º–æ–π —á—É–≤–∞–∫! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç –¥–ª—è —Ç–µ–±—è —Ç–∞–∫ –∂–µ —Ö–æ—Ä–æ—à –∏ –ø—Ä–µ–∫—Ä–∞—Å–µ–Ω –∫–∞–∫ –ª—é–±–∞—è —Å—Ä–µ–¥–∞!",
    weight: 0.2
  },
  {
    label: "üêª",
    wish: "üêª–ú–µ–¥–≤–µ–∂—å—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞üêª. –ü—É—Å—Ç—å –≤ –∂–∏–∑–Ω–∏ –±—É–¥–µ—Ç –ø–æ–±–æ–ª—å—à–µ –º—ë–¥–∞ –∏ –±–æ–ª—å—à–µ –º—è–≥–∫–∏—Ö –æ–±—ä—è—Ç–∏–π!",
    weight: 0.2
  },
  {
    label: "ü¶î",
    wish: "ü¶î–Å–∂–∏–∫ –∞–±—Å—É—Ä–¥–∞ ü¶î. –ñ–µ–ª–∞—é —á—Ç–æ –±—ã —Ç–≤–æ–π –ø—É—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Å–≤–µ—â–∞–ª–∞ —Å–≤–µ—Ç–ª–∞—è –ª—É–Ω–∞, –∞ –º—É—Ä–∞–≤—å–∏ —É—Å—Ç—É–ø–∞–ª–∏ –¥–æ—Ä–æ–≥—É! ",
    weight: 0.15
  },
  {
    label: "üê±",
    wish: "üê±–ö–æ—à–∞—á–∏–π –º–µ–º üê±.–ñ–µ–ª–∞—é —Ç–µ–±–µ –≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –º–µ–º–æ–≤ —Å –∫–æ—Ç–∏–∫–∞–º–∏!",
    weight: 0.1
  },
  {
    label: "ü¶ù",
    wish: "ü¶ù–ï–Ω–æ—Ç —É–∫—Ä–∞–ª —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ ü¶ù! –ñ–µ–ª–∞—é —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —É–∫—Ä–∞–¥–µ–Ω–Ω–æ–µ –µ–Ω–æ—Ç–æ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ!",
    weight: 0.05
  }
];

const textureImg = new Image();
textureImg.src = "wheel.png";
let texturePattern = null;

textureImg.onload = () => {
  //texturePattern = ctx.createPattern(textureImg, 'repeat');
  resizeCanvas(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
};


  const totalWeight = wishes.reduce((sum, w) => sum + w.weight, 0);

  let angle = 0;        // —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
  let isSpinning = false;
  let devicePR = window.devicePixelRatio || 1;

  function resizeCanvas() {
    // –†–∞–∑–º–µ—Ä –ø–æ–¥ –∫–≤–∞–¥—Ä–∞—Ç, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ –æ–∫–Ω–æ
    const size = Math.min(window.innerWidth, window.innerHeight * 0.8);
    canvas.width = size * devicePR;
    canvas.height = size * devicePR;
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.scale(devicePR, devicePR);
    // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ (startScreen —Å–∫—Ä—ã—Ç), —Ä–∏—Å—É–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if (!startScreen.classList.contains("hidden")) return;
    drawWheel(angle * Math.PI / 180);
  }
  window.addEventListener("resize", resizeCanvas);

  function drawWheel(angleOffset = 0) {
  const cw = canvas.width / devicePR;
  const ch = canvas.height / devicePR;
  const cx = cw / 2;
  const cy = ch / 2;
  const radius = Math.min(cw, ch) / 2 - 10;
  if (radius <= 0) return;

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.save();
  ctx.translate(cx, cy);
  ctx.rotate(angleOffset);

  // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä–∞
  let startAng = 0;
  wishes.forEach((wish, index) => {
    const slice = (wish.weight / totalWeight) * 2 * Math.PI;

    ctx.beginPath();
    ctx.moveTo(0, 0);
    ctx.arc(0, 0, radius, startAng, startAng + slice);
    ctx.closePath();
    ctx.fillStyle = `hsl(${index * 60}, 40%, 86%)`; // –Ω–µ–º–Ω–æ–≥–æ –±–ª–µ–¥–Ω–µ–µ
    ctx.fill();
    ctx.stroke();

    startAng += slice;
  });

  // –¢–µ–ø–µ—Ä—å ‚Äî —Ä–∏—Å—É–µ–º —Ç–æ—Ä—Ç –ù–ê–î —Å–µ–∫—Ç–æ—Ä–∞–º–∏
  if (textureImg.complete && textureImg.naturalWidth > 0) {
    ctx.save();
    ctx.globalAlpha = 0.8;
    ctx.globalCompositeOperation = "multiply";
    const imgSize = radius * 2;
    ctx.drawImage(textureImg, -radius, -radius, imgSize, imgSize);
    ctx.restore();
  }

  ctx.restore(); // –≤—ã–π—Ç–∏ –∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏

  // –ù–∞–¥–ø–∏—Å–∏ ‚Äî –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
  let startAngle = 0;
  wishes.forEach((wish, index) => {
    const slice = (wish.weight / totalWeight) * 2 * Math.PI;
    const mid = startAngle + slice / 2;

    ctx.save();
    ctx.translate(cx, cy);
    ctx.rotate(mid + angleOffset);
    ctx.textAlign = "right";
    ctx.fillStyle = "#000";
    ctx.font = "bold 14px sans-serif";
    ctx.fillText(wish.label, radius - 10, 0);
    ctx.restore();

    startAngle += slice;
  });

  // –°—Ç—Ä–µ–ª–∫–∞
  ctx.beginPath();
  ctx.moveTo(cx, cy - radius + 5);
  ctx.lineTo(cx - 10, cy - radius - 10);
  ctx.lineTo(cx + 10, cy - radius - 10);
  ctx.closePath();
  ctx.fillStyle = "#d63031";
  ctx.fill();
}



  function spinWheel() {
    if (isSpinning) return;
    isSpinning = true;
  sound.currentTime = 0;
  sound.loop = true;
  sound.play();
  music.pause();
    // 1. –í—ã–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞—Ä–∞–Ω–µ–µ –ø–æ –≤–µ—Å–∞–º
    let r = Math.random() * totalWeight;
    let selectedIndex = 0;
    let startAng = 0; // –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
    for (let i = 0; i < wishes.length; i++) {
      const slice = (wishes[i].weight / totalWeight) * 2 * Math.PI;
      if (r < wishes[i].weight) {
        selectedIndex = i;
        break;
      }
      r -= wishes[i].weight;
      startAng += slice;
    }
    const sliceAngle = (wishes[selectedIndex].weight / totalWeight) * 2 * Math.PI;
    // –¶–µ–Ω—Ç—Ä —Å–µ–∫—Ç–æ—Ä–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (–æ—Ç 0 –ø–æ –ø—Ä–∞–≤–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π –æ—Å–∏ canvas.arc —Ä–∏—Å—É–µ—Ç –ø–æ —á–∞—Å–æ–≤–æ–π, –Ω–æ –∑–¥–µ—Å—å –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ)
    const midAng = startAng + sliceAngle / 2;

    // 2. –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª —Ç–∞–∫, —á—Ç–æ–±—ã midAng –æ–∫–∞–∑–∞–ª—Å—è —É —Å—Ç—Ä–µ–ª–∫–∏ —Å–≤–µ—Ä—Ö—É (-œÄ/2)
    // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª angle –≤ –≥—Ä–∞–¥—É—Å–∞—Ö; –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–∞–¥–∏–∞–Ω—ã:
    const currentRad = (angle % 360) * Math.PI / 180;
    // –ñ–µ–ª–∞–µ–º–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è angleOffset = targetRad (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö).
    // –ü—É—Å—Ç—å —Å—Ç—Ä–µ–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–µ—Ä—Ö, —Ç–æ –µ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -œÄ/2 –≤ —Å–∏—Å—Ç–µ–º–µ canvas. –ù—É–∂–Ω–æ –≤—Ä–∞—â–µ–Ω–∏–µ —Ç–∞–∫,
    // —á—Ç–æ–±—ã midAng + angleOffset ‚â° -œÄ/2 (mod 2œÄ)  ‚Üí angleOffset ‚â° -œÄ/2 - midAng (mod 2œÄ).
    let targetOffset = -Math.PI/2 - midAng;
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ [0, 2œÄ)
    targetOffset = ((targetOffset % (2*Math.PI)) + 2*Math.PI) % (2*Math.PI);

    // –ß—Ç–æ–±—ã –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ä–∞—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π, –ø—Ä–∏–±–∞–≤–ª—è–µ–º k*2œÄ
    const rotations = 3 + Math.floor(Math.random() * 3); // 3..5 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
    const fullRotation = rotations * 2 * Math.PI;
    const finalOffset = fullRotation + targetOffset; // –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö, —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç 0

    // 3. –ê–Ω–∏–º–∞—Ü–∏—è: –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ angle (degree) –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    const startAngleDeg = angle % 360;
    const targetAngleDeg = (finalOffset * 180 / Math.PI) % 360 + 360 * rotations; 
    // –ó–¥–µ—Å—å –ø—Ä–æ—â–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—É—é –¥–µ–ª—å—Ç—É: deltaDeg = finalOffset*180/œÄ - currentRad*180/œÄ + 360*rotations
    // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º ease, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç 0 –¥–æ finalOffset –≤ –∞–Ω–∏–º–∞—Ü–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ç–µ–∫—É—â–µ–µ angle,
    // –∏ –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø–∏—à–µ–º angle = (angle + finalOffset*180/œÄ) % 360.
    const duration = 3000;
    const startTime = performance.now();

    function animate(time) {
      const elapsed = time - startTime;
      const t = Math.min(elapsed / duration, 1);
      const ease = 1 - Math.pow(1 - t, 3);
      // —Ç–µ–∫—É—â–∏–π offset –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö –æ—Ç 0: ease * finalOffset
      const offsetRad = ease * finalOffset;
      angle = (offsetRad * 180 / Math.PI) % 360;
      drawWheel(offsetRad);
      if (t < 1) {
        requestAnimationFrame(animate);
      } else {
        // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
		sound.pause();
		music.play();
      sound.currentTime = 0;
  const soundToPlay = obtained.has(selectedIndex) ? soundAgain : soundWin;
  if (!obtained.has(selectedIndex)) {
	  
	   winGif.classList.remove("hidden");
  winGif.src = ""; // —Å–±—Ä–æ—Å src
  setTimeout(() => {
    winGif.src = "win.gif";
  }, 0);
	  
    obtained.add(selectedIndex);
    localStorage.setItem("obtainedWishes", JSON.stringify([...obtained]));
  }
  soundToPlay.currentTime = 0;
  soundToPlay.play();
        showResultFixed(selectedIndex);
		
        isSpinning = false;
      }
    }
    requestAnimationFrame(animate);
  }

  function showResultFixed(index) {
  const overlay = document.getElementById("overlay");
  const wishText = document.getElementById("wish-text");
  const spinAgainButton = document.getElementById("spin-again");

  wishText.textContent = wishes[index].wish;
  overlay.classList.add("show");

  function hideOverlay() {
	      overlay.classList.remove("show");

    overlay.classList.remove("show");
	 winGif.classList.add("hidden");
    spinAgainButton.removeEventListener("click", hideOverlay);
  }

  spinAgainButton.addEventListener("click", hideOverlay);
}
// –∫–Ω–æ–ø–∫–∏ –∏ –æ–≤–µ—Ä–ª–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π
const openWishesBtn = document.getElementById("open-wishes");
const closeWishesBtn = document.getElementById("close-wishes");
const wishesListOverlay = document.getElementById("wishes-list-overlay");
const wishesListUl = document.getElementById("wishes-list");

openWishesBtn.addEventListener("click", () => {
  wishesListUl.innerHTML = "";
  [...obtained].forEach(i => {
    const li = document.createElement("li");
    const percent = (wishes[i].weight / totalWeight * 100).toFixed(1);
    li.textContent = `${wishes[i].label} ‚Äî —Ä–µ–¥–∫–æ—Å—Ç—å ${percent}%`;
    wishesListUl.append(li);
  });
  wishesListOverlay.classList.add("show");
});

closeWishesBtn.addEventListener("click", () => {
  wishesListOverlay.classList.remove("show");
});


  canvas.addEventListener("click", spinWheel);
  canvas.addEventListener("touchstart", (e) => {
    e.preventDefault();
    spinWheel();
  });

  // –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
  startButton.addEventListener("click", () => {
    console.log("–ù–∞–∂–∞–ª–∏ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å");
    startScreen.classList.add("hidden");
    gameScreen.classList.remove("hidden");
    // –ü–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä canvas
    resizeCanvas();
    music.play().catch(err => console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º—É–∑—ã–∫—É:", err));
  });
});
